{"version":3,"sources":["component/card/index.jsx","component/cardList/index.jsx","component/searchField/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsterList","map","key","SearchField","onChange","type","placeholder","App","props","handlerSearch","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uVAIaA,G,MAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCJHC,G,MAAW,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACxB,OACE,yBAAKP,UAAU,aACZO,EAAYC,IAAI,SAAAT,GAAO,OAAI,kBAAC,EAAD,CAAMU,IAAKV,EAAQG,GAAIH,QAASA,SCJrDW,G,MAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACzB,2BACEX,UAAU,aACVY,KAAK,SACLC,YAAY,eACZF,SAAUA,MC+BCG,G,kBAhCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtC,EAAKC,MAAQ,CACXf,YAAa,GACbY,YAAa,IALE,E,iFAQE,IAAD,OAClBI,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,YAAaoB,Q,+BAMtC,IAAD,EAC8BC,KAAKN,MAAlCf,EADD,EACCA,YAAaY,EADd,EACcA,YACfU,EAAiBtB,EAAYuB,OAAO,SAAA/B,GAAO,OAC/CA,EAAQK,KAAK2B,cAAcC,SAASb,EAAYY,iBAElD,OACE,yBAAK/B,UAAU,OACb,wBAAIA,UAAU,SAAd,mBACA,kBAAC,EAAD,CAAaW,SAAUiB,KAAKZ,gBAC5B,kBAAC,EAAD,CAAUT,YAAasB,S,GA3BbI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.ec2e6438.chunk.js","sourcesContent":["import React from 'react'\nimport './card-style.css'\n\n\nexport const Card = ({monster}) => (\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt='monster'/>\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n)","import React from 'react';\nimport { Card } from '../card'\nimport './card-list-style.css'\n\nexport const CardList = ({monsterList}) => {\n  return (\n    <div className='card-list'>     \n      {monsterList.map(monster => <Card key={monster.id} monster={monster}/>)}\n    </div>\n  )\n}","import React from 'react'\nimport './searchField-style.css'\n\nexport const SearchField = ({onChange}) => (\n  <input \n    className='search-box'\n    type=\"search\" \n    placeholder='monster list' \n    onChange={onChange}/>\n)","import React, { Component } from 'react';\nimport { CardList } from './component/cardList/index.jsx'\nimport { SearchField } from './component/searchField/index.jsx'\n\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsterList: [],\n      searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsterList: users }))\n  }\n  handlerSearch = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsterList, searchField } = this.state\n    const filterMonsters = monsterList.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className='App'>\n        <h1 className=\"title\">Monster rolodex</h1>\n        <SearchField onChange={this.handlerSearch}/>\n        <CardList monsterList={filterMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}